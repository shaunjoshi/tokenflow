# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"] # Standard build system requirement
build-backend = "setuptools.build_meta"

[project]
name = "model-selection-backend"
version = "0.2.0"
description = "FastAPI backend for intelligent model selection using BART classification and OpenRouter."
readme = "README.md"
requires-python = ">=3.10" # Recommended minimum for modern async features and dependencies
license = { text = "MIT" } # Or choose another license like Apache-2.0
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
classifiers = [ # Standard classifiers for PyPI visibility
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License", # Match your license choice
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]

# Core runtime dependencies based on actual backend needs
dependencies = [
    "fastapi>=0.103.1,<0.112.0", # FastAPI framework
    "uvicorn[standard]>=0.23.2,<0.31.0", # ASGI server
    "pydantic>=2.3.0,<3.0.0", # Data validation
    "pydantic-settings>=2.0.3,<2.10.0", # Settings management
    "httpx>=0.24.1,<0.28.0", # HTTP client for API calls
    "supabase>=2.0.0,<3.0.0", # Supabase client
    "python-jose[cryptography]>=3.3.0,<3.4.0", # JWT handling
    "openai>=1.6.0,<2.0.0", # OpenAI/OpenRouter client
    "langchain-text-splitters>=0.0.1,<0.1.0", # Text splitting
    "transformers>=4.35.0,<4.40.0", # Hugging Face transformers for BART
    "torch>=2.0.0,<3.0.0", # PyTorch for transformers
    "tqdm>=4.66.1,<5.0.0", # Progress bars for transformers
    "sentencepiece>=0.2.0", # Tokenization dependency for transformers
    "protobuf>=4.23.0,<5.0.0", # Protocol buffers for transformers
    "accelerate>=0.21.0,<0.30.0", # Optional acceleration for transformers
    "python-dotenv>=1.0.0,<2.0.0", # For loading .env files # For Server-Sent Events
    "sse-starlette>=1.8.0,<2.0.0",
    "llmlingua>=0.2.2",
]

[project.urls] # Optional: Links for users
Homepage = "https://github.com/your-username/model-selection-backend" # Example
Repository = "https://github.com/your-username/model-selection-backend" # Example

[project.optional-dependencies]
# Development dependencies: install with `uv pip install -e .[dev]` or `pip install -e .[dev]`
dev = [
    "ruff>=0.4.0",         # Linter and Formatter
    "pytest>=7.4.0",       # Testing framework
    "pytest-asyncio>=0.21.0",# For testing async FastAPI code
    "httpx>=0.27.0",       # Also needed for test client
    # "pre-commit>=3.0.0", # Optional: For git hooks
]

# --- Tool Configurations ---
[tool.setuptools]
packages = ["backend"] # Specify package discovery here

[tool.ruff]
# Minimal Ruff config - add more rules as needed
line-length = 88
select = ["E", "F", "W", "I", "UP", "PL", "TRY"] # Common useful rule sets
ignore = []
# Specify Python version Ruff should target
target-version = "py310"

[tool.ruff.lint]
# Allow unused variables in `__init__.py`
ignore = ["F401"]

[tool.ruff.format]
# Config options for the formatter: https://docs.astral.sh/ruff/formatter/options/
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
# Configure pytest
pythonpath = ["."] # Add project root to python path for imports
testpaths = ["tests"] # Directory containing tests
asyncio_mode = "auto" # Automatically handle asyncio tests
